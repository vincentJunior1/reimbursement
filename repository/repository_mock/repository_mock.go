// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/main.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	models "reimbursement/helper/models"
	entity "reimbursement/repository/entity"
	models0 "reimbursement/usecase/models"

	gomock "github.com/golang/mock/gomock"
)

// MockMysqlDatabase is a mock of MysqlDatabase interface.
type MockMysqlDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlDatabaseMockRecorder
}

// MockMysqlDatabaseMockRecorder is the mock recorder for MockMysqlDatabase.
type MockMysqlDatabaseMockRecorder struct {
	mock *MockMysqlDatabase
}

// NewMockMysqlDatabase creates a new mock instance.
func NewMockMysqlDatabase(ctrl *gomock.Controller) *MockMysqlDatabase {
	mock := &MockMysqlDatabase{ctrl: ctrl}
	mock.recorder = &MockMysqlDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlDatabase) EXPECT() *MockMysqlDatabaseMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockMysqlDatabase) CreateCompany(ctx context.Context, data *entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockMysqlDatabaseMockRecorder) CreateCompany(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockMysqlDatabase)(nil).CreateCompany), ctx, data)
}

// CreateUser mocks base method.
func (m *MockMysqlDatabase) CreateUser(ctx context.Context, data entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMysqlDatabaseMockRecorder) CreateUser(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMysqlDatabase)(nil).CreateUser), ctx, data)
}

// DeleteEmployeeClaim mocks base method.
func (m *MockMysqlDatabase) DeleteEmployeeClaim(ctx context.Context, data entity.EmployeeClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeeClaim", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployeeClaim indicates an expected call of DeleteEmployeeClaim.
func (mr *MockMysqlDatabaseMockRecorder) DeleteEmployeeClaim(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeeClaim", reflect.TypeOf((*MockMysqlDatabase)(nil).DeleteEmployeeClaim), ctx, data)
}

// FindCompanyById mocks base method.
func (m *MockMysqlDatabase) FindCompanyById(ctx context.Context, id int) (entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCompanyById", ctx, id)
	ret0, _ := ret[0].(entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCompanyById indicates an expected call of FindCompanyById.
func (mr *MockMysqlDatabaseMockRecorder) FindCompanyById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCompanyById", reflect.TypeOf((*MockMysqlDatabase)(nil).FindCompanyById), ctx, id)
}

// FindEmployeeClaim mocks base method.
func (m *MockMysqlDatabase) FindEmployeeClaim(ctx context.Context, id int) (entity.EmployeeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmployeeClaim", ctx, id)
	ret0, _ := ret[0].(entity.EmployeeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmployeeClaim indicates an expected call of FindEmployeeClaim.
func (mr *MockMysqlDatabaseMockRecorder) FindEmployeeClaim(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmployeeClaim", reflect.TypeOf((*MockMysqlDatabase)(nil).FindEmployeeClaim), ctx, id)
}

// FindUserByEmail mocks base method.
func (m *MockMysqlDatabase) FindUserByEmail(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockMysqlDatabaseMockRecorder) FindUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockMysqlDatabase)(nil).FindUserByEmail), ctx, email)
}

// GetAllEmployeeClaim mocks base method.
func (m *MockMysqlDatabase) GetAllEmployeeClaim(ctx context.Context, employeeId int, params models0.ParamsGetEmployeeClaim) ([]entity.EmployeeClaim, models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployeeClaim", ctx, employeeId, params)
	ret0, _ := ret[0].([]entity.EmployeeClaim)
	ret1, _ := ret[1].(models.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllEmployeeClaim indicates an expected call of GetAllEmployeeClaim.
func (mr *MockMysqlDatabaseMockRecorder) GetAllEmployeeClaim(ctx, employeeId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployeeClaim", reflect.TypeOf((*MockMysqlDatabase)(nil).GetAllEmployeeClaim), ctx, employeeId, params)
}

// GetAllEmployeeClaimAdmin mocks base method.
func (m *MockMysqlDatabase) GetAllEmployeeClaimAdmin(ctx context.Context, companyId int, params models0.ParamsGetEmployeeClaim) ([]entity.EmployeeClaim, models.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployeeClaimAdmin", ctx, companyId, params)
	ret0, _ := ret[0].([]entity.EmployeeClaim)
	ret1, _ := ret[1].(models.Page)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllEmployeeClaimAdmin indicates an expected call of GetAllEmployeeClaimAdmin.
func (mr *MockMysqlDatabaseMockRecorder) GetAllEmployeeClaimAdmin(ctx, companyId, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployeeClaimAdmin", reflect.TypeOf((*MockMysqlDatabase)(nil).GetAllEmployeeClaimAdmin), ctx, companyId, params)
}

// SaveEmployeeClaim mocks base method.
func (m *MockMysqlDatabase) SaveEmployeeClaim(ctx context.Context, data entity.EmployeeClaim) (entity.EmployeeClaim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEmployeeClaim", ctx, data)
	ret0, _ := ret[0].(entity.EmployeeClaim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEmployeeClaim indicates an expected call of SaveEmployeeClaim.
func (mr *MockMysqlDatabaseMockRecorder) SaveEmployeeClaim(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEmployeeClaim", reflect.TypeOf((*MockMysqlDatabase)(nil).SaveEmployeeClaim), ctx, data)
}

// UpdatedEmployeeClaim mocks base method.
func (m *MockMysqlDatabase) UpdatedEmployeeClaim(ctx context.Context, id int, data *entity.EmployeeClaim) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedEmployeeClaim", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatedEmployeeClaim indicates an expected call of UpdatedEmployeeClaim.
func (mr *MockMysqlDatabaseMockRecorder) UpdatedEmployeeClaim(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedEmployeeClaim", reflect.TypeOf((*MockMysqlDatabase)(nil).UpdatedEmployeeClaim), ctx, id, data)
}
